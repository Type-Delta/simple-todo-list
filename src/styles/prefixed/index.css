
@import url('./reset.css');
@import url('./base.css');



body > nav {
   position: fixed;
   top: 0;
   width: 100%;
   background-color: var(--color-bg);
   z-index: 100;
}

body > nav::after {
   content: "";
   position: absolute;
   bottom: -30px;
   height: 30px;
   width: 100%;
   left: 0;
   background-color: inherit;
   -webkit-mask-image: linear-gradient(black, transparent);
           mask-image: linear-gradient(black, transparent);
}

nav .title {
   margin: 1.5rem 0 0 1.5rem;
   font-size: 1.7rem;
}

.container {
   margin: 6rem 0 3rem 0;
   display: flex;
   justify-content: space-between;
   padding: 0 3rem;

   @media only screen and (min-width: 768px) {
      padding: 0 1.5rem;
   };
}

.container .alignLeft {
   min-width: 10rem;
   max-width: 17rem;
   position: fixed;
   z-index: 100;

   @media only screen and (max-width: 768px) {
      display: none;
   };

   @media only screen and (max-width: 1100px) {
      position: static;
   };
}

.alignLeft .listHeader {
   margin-top: .2rem;

   & sup {
      top: -0.6em;
   }
}


.alignLeft .listHeader button.clearCompleted {
   font-size: .75rem;
   color: var(--color-inactive);
   --sta-tooltip-yOffset: -2.5rem;
   --sta-tooltip-xOffset: 0%;
}

.alignLeft .listHeader:hover button.clearCompleted {
   color: var(--color-gray-300);
}

.alignLeft .completedList .listContent .text {
   text-wrap: pretty;
}

.alignLeft .completedList .listContent .listItem.placeholder .text {
   color: var(--color-inactive);
}


.alignLeft .completedList .listContent .listItem:not(.placeholder) ~ .placeholder {
   /* hide the placeholder if there are other items in the list */
   display: none;
}

.completedList .listContent {
   display: flex;
   flex-direction: column;
   margin: .6rem 0 0 0;
   overflow-y: clip;
   overflow-x: visible;
}

.container .alignRight {
   margin: 0 auto;
   width: 30rem;
}




.list .listHeader .title {
   display: inline;
   font-size: 1.9rem;
   font-weight: 600;
   z-index: 20;

   & text {
      font-size: inherit;
      font-weight: inherit;
      color: inherit;
   }
}

.alignRight .listHeader button.editTitle {
   --sta-tooltip-yOffset: -2.5rem;
   --sta-tooltip-xOffset: 0%;
   display: inline;
}

.alignRight .listHeader button.editTitle > svg {
   width: 20px;
   aspect-ratio: 1;
   fill: var(--color-inactive);
}

.alignRight .listHeader:hover button.editTitle > svg {
   fill: var(--color-gray-300);
}


.list .listContent {
   --_itemHeight: 2.1rem;

   display: flex;
   flex-direction: column;
   margin: 1.3rem 0 0 0;
   position: relative;
   /* LINK: @ftalkwd */
   overflow: visible;
   padding: .2rem;
}

.list .listContent.overflowClip {
   overflow-x: visible;
   overflow-y: clip;
}

.list .listItem {
   min-height: var(--_itemHeight);
   position: relative;
   display: flex;
   background-color: var(--color-bg);
   padding: .25rem 0;
   border: none;
}

.list .listItem:not(:last-child) {
   border-bottom: 1.8px dashed var(--color-inactive);
}

.list .listItem::after {
   content: "";
   position: absolute;
   display: none;
   top: 50%;
   left: 6%;
   width: 0;
   height: 2px;
   background-color: var(--color-green);
   opacity: .8;
}

.list .listItem.complete::after {
   display: block;
   animation: checkDash 2s forwards ease-in-out 1s;
}

@keyframes checkDash {
   0% {
      width: 0;
   }

   50% {
      width: 85%;
      left: 6%;
   }

   100% {
      width: 0;
      left: 94%;
   }
}

.list .listItem .action-cont {
   margin: auto 0;
   height: 100%;
   display: flex;
   flex-direction: row;
   justify-content: center;
   gap: .2rem;
}

.list .listItem .action-cont.checkbox-cont {
   margin: .13rem 0 auto 0;
   aspect-ratio: 1;
}

.list .listItem:not(:hover) .action-cont:not(.checkbox-cont) {
   display: none;
}

.list .listItem.dragging {
   display: auto !important;
   border-radius: .4rem;
   position: absolute;
   opacity: .65;
   background-color: var(--color-inactive);
   translate: 0 -50%;
   left: 0;
   z-index: 10;

   & .checkbox-cont .checkbox {
      --sta-checkbox-color: var(--color-fg) !important;
   }
}

.list .listItem.dragging.invalidPos {
   background-color: var(--color-red);
   color: var(--color-white);

   & .checkbox-cont .checkbox {
      --sta-checkbox-color: var(--color-white) !important;
   }
}

.list .listItem .action-cont > * {
   height: calc(var(--_itemHeight) * .7);
   border-radius: .25rem;
}

.list .listItem .action-cont > .drag-btn {
   aspect-ratio: .6;
   cursor: grab;
   background-color: var(--color-inactive);

   &:active {
      cursor: grabbing;
   }
}

.list .listItem .action-cont > .drag-btn > svg {
   fill: var(--color-fg);
   width: 100%;
   margin: auto;
}

.list .listItem .action-cont > .delete-btn {
   aspect-ratio: 1;
   background-color: var(--color-red);
   --sta-tooltip-bgColor: var(--color-red);
   --sta-tooltip-fgColor: var(--color-white);
}

.list .listItem .action-cont > .delete-btn > svg {
   margin: auto;
   width: 80%;
   aspect-ratio: 1;
   fill: var(--color-white);
}

.list .listItem .checkbox {
   --sta-checkbox-color: var(--color-inactive);
   --sta-checkbox-stoke-width: 5;

   display: block;
   height: calc(var(--_itemHeight) * .6);
   aspect-ratio: 1;
   border: none;
   background-color: transparent;
}

.list .listItem .text-input {
   width: calc(100% - var(--_itemHeight) - .38rem);
   height: -moz-fit-content;
   height: fit-content;
   min-height: 1em;
   background-color: transparent;
   border: none;
   padding-left: .38rem;
   vertical-align: middle;
   margin: auto 0;
   cursor: text;
   color: inherit;
}

.list .listItem.placeholder {
   margin-top: 0;
   transition:
      margin-top .3s ease;

   & .text-input {
      transition: color .07s linear;
      color: var(--color-inactive);
      cursor: pointer;
   }
}

.list .listItem:not(.placeholder) ~ .placeholder {
   margin-top: .5rem;
}

.list .listItem.placeholder:hover .text-input,
.list .listItem.placeholder:active .text-input {
   color: var(--color-gray-300);
}

footer {
   position: fixed;
   bottom: 0;
   width: 100%;
   text-align: center;
   background-color: var(--color-bg);
   padding: .4rem;
   text-decoration-thickness: .7em;
   text-underline-offset: .12em;
   z-index: 100;

   & a {
      font-weight: 500;
   }

   & * {
      font-size: .8rem;
   }
}

footer::after {
   content: "";
   position: absolute;
   top: -30px;
   height: 30px;
   width: 100%;
   left: 0;
   background-color: inherit;
   -webkit-mask-image: linear-gradient(transparent, black);
           mask-image: linear-gradient(transparent, black);
}
/*# sourceMappingURL=data:application/json;base64, */